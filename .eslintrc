{
	"env": {
		"browser": true,
		"es2020": true
	},
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": 11,
		"sourceType": "module"
	},
	"plugins": [
		"@typescript-eslint",
		"unused-imports",
		"simple-import-sort",
		"react-hooks",
		"spellcheck",
		"import",
		"eslint-plugin-local-rules"
	],
	"extends": [
		"plugin:import/recommended",
		"plugin:import/errors",
		"plugin:import/warnings",
		"plugin:import/typescript",
		"plugin:react-hooks/recommended"
	],
	"rules": {
		"react-hooks/exhaustive-deps": [
			"warn",
			{
				// custom hooks with deps
				"additionalHooks": "(useImmutableCallback)"
			}
		],
		// turn on errors for missing imports
		"local-rules/proper-import-aliases": "error",
		"import/no-unresolved": "error",
		"spellcheck/spell-checker": [
			"error",
			{
				"comments": false,
				"strings": true,
				"identifiers": true,
				"templates": true,
				"ignoreRequire": true,
				"lang": "en_US",
				"skipWords": [
					"Aes",
					"Checkbox",
					"Classname",
					"DOM",
					"mdx",
					"webkit",
					"memfs",
					"Flate",
					"Focusable",
					"Frontmatter",
					"Gfm",
					"Globals",
					"Hkdf",
					"Blockquote",
					"Strikethrough",
					"Hmac",
					"dfs",
					"Obfuscator",
					"Outdent",
					"Paddings",
					"Postfix",
					"Renderer",
					"Struct",
					"Textinput",
					"Tooltip",
					"Twofish",
					"Uploader",
					"Uri",
					"Urls",
					"vite",
					"Workspace",
					"Xmark",
					"Virtualizer",
					"Yaml",
					"aes",
					"backtick",
					"calc",
					"childs",
					"codeblock",
					"debounced",
					"decrypt",
					"decrypted",
					"deepink",
					"Unordered",
					"endregion",
					"esm",
					"debounce",
					"evt",
					"formatter",
					"gcm",
					"href",
					"ipc",
					"jsdoc",
					"lockfile",
					"lstat",
					"monaco",
					"postcss",
					"regexrange",
					"repo",
					"rowid",
					"zod",
					"sql",
					"sqlite",
					"stringified",
					"svg",
					"svgo",
					"svgr",
					"transpile",
					"tsx",
					"txt",
					"webpack",
					"whitespace",
					"Tsconfig",
					"readdir",
					"workspaces"
				],
				// Check if word contains numbers
				"skipIfMatch": [
					"\\d+",
					"^[a-z]+$"
				],
				"minLength": 3
			}
		],
		"import/no-useless-path-segments": [
			"error",
			{
				"noUselessIndex": true
			}
		],
		"import/export": "off",
		"import/namespace": "warn",
		"import/no-duplicates": [
			"error",
			{
				"prefer-inline": true
			}
		],
		"import/newline-after-import": [
			"error",
			{
				"count": 1
			}
		],
		"unused-imports/no-unused-imports": "error",
		"simple-import-sort/imports": [
			"error",
			{
				// docs: https://github.com/lydell/eslint-plugin-simple-import-sort#custom-grouping
				"groups": [
					// Side effect imports.
					[
						"^\\u0000"
					],
					// Node.js builtins prefixed with `node:`.
					[
						"^node:"
					],
					// Packages.
					// Things that start with a letter (or digit or underscore), or `@` followed by a letter.
					[
						"^react",
						"^\\w",
						"^@\\w"
					],
					// Absolute imports and other imports such as Vue-style `@/foo`.
					// Anything not matched in another group.
					[
						"^"
					],
					// Relative imports.
					[
						"^../../"
					],
					// Anything that starts with a dot.
					[
						"^../",
						"^./",
						"^\\."
					],
					// Global CSS files at bottom
					[
						"\\.css$"
					]
				]
			}
		],
		"function-call-argument-newline": [
			"error",
			"consistent"
		],
		"no-var": "error",
		"no-bitwise": "error",
		"no-multi-spaces": "error",
		"no-multiple-empty-lines": "error",
		"semi": "error",
		"prefer-const": "error",
		// off cuz eslint is dumb: https://stackoverflow.com/questions/63818415/react-was-used-before-it-was-defined
		"no-use-before-define": "off",
		"@typescript-eslint/no-use-before-define": [
			"error"
		],
		// Codestyle
		"indent": [
			"off",
			"tab",
			{
				"SwitchCase": 1
			}
		],
		"camelcase": [
			"error",
			{
				"allow": [
					"^UNSAFE_",
					"^UNSTABLE_"
				]
			}
		],
		"arrow-parens": [
			"error",
			"always"
		],
		"operator-linebreak": [
			"error",
			"after",
			{
				"overrides": {
					"?": "before",
					":": "before"
				}
			}
		]
	},
	"settings": {
		"import/parsers": {
			"@typescript-eslint/parser": [
				".ts",
				".tsx"
			]
		},
		"import/resolver": {
			"typescript": {
				"alwaysTryTypes": true // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
				// "project": "tsconfig.json"
			}
		}
	}
}